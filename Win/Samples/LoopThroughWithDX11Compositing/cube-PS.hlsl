/* -LICENSE-START-
** Copyright (c) 2015 Blackmagic Design
**
** Permission is hereby granted, free of charge, to any person or organization
** obtaining a copy of the software and accompanying documentation covered by
** this license (the "Software") to use, reproduce, display, distribute,
** execute, and transmit the Software, and to prepare derivative works of the
** Software, and to permit third-parties to whom the Software is furnished to
** do so, all subject to the following:
**
** The copyright notices in the Software and this entire statement, including
** the above license grant, this restriction and the following disclaimer,
** must be included in all copies of the Software, in whole or in part, and
** all derivative works of the Software, unless such copies or derivative
** works are solely in the form of machine-executable object code generated by
** a source language processor.
**
** THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
** IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
** FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
** SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
** FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
** ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
** DEALINGS IN THE SOFTWARE.
** -LICENSE-END-
*/
#include "cube.hlsli"

float4 main(VS_OUTPUT input) : SV_Target{
	float tx, ty, Y, Cb, Cr, r, g, b;
	tx = input.Tex.x;
	ty = input.Tex.y;

	// The UYVY texture appears to the shader with 1/2 the true width since we used RGBA format to pass UYVY
	uint w, h;
	UYVYtex.GetDimensions(w, h);
	uint true_width = w * 2;

	// For U0 Y0 V0 Y1 macropixel, lookup Y0 or Y1 based on whether
	// the original texture x coord is even or odd.
	if (frac(floor(tx * true_width + 0.5) / 2.0) > 0.0)
		Y = UYVYtex.Sample(samLinear, float2(tx, ty)).a;		// odd so choose Y1
	else
		Y = UYVYtex.Sample(samLinear, float2(tx, ty)).g;		// even so choose Y0
	Cb = UYVYtex.Sample(samLinear, float2(tx, ty)).b;
	Cr = UYVYtex.Sample(samLinear, float2(tx, ty)).r;

	// Y: Undo 1/256 texture value scaling and scale [16..235] to [0..1] range
	// C: Undo 1/256 texture value scaling and scale [16..240] to [-0.5 .. + 0.5] range
	Y = (Y * 256.0 - 16.0) / 219.0;
	Cb = (Cb * 256.0 - 16.0) / 224.0 - 0.5;
	Cr = (Cr * 256.0 - 16.0) / 224.0 - 0.5;
	// Convert to RGB using Rec.709 conversion matrix (see eq 26.7 in Poynton 2003)
	r = Y + 1.5748 * Cr;
	g = Y - 0.1873 * Cb - 0.4681 * Cr;
	b = Y + 1.8556 * Cb;

	// Set alpha to 0.7 for partial transparency when GL_BLEND is enabled
	return float4(r, g, b, 0.7);

}